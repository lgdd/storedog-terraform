services:
  dd-agent:
    image: gcr.io/datadoghq/agent:latest
    pid: host
    environment:
    - DD_API_KEY=${DD_API_KEY}
    - DD_APM_NON_LOCAL_TRAFFIC=true
    - DD_LOGS_ENABLED=true
    - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
    - DD_CONTAINER_EXCLUDE=image:agent name:puppeteer
    - DD_HOSTNAME=${DD_HOSTNAME-storedog-host}
    - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    ports:
    - 8126:8126/tcp
    - 8125:8125/udp
    networks:
    - storedog-network
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    - /proc/:/host/proc/:ro
    - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    - postgres_logs:/var/log/pg_log:ro
  frontend:
    image: ghcr.io/datadog/storedog/frontend:latest
    command: bash -c "wait-for-it backend:4000 -- npm run dev"
    depends_on:
    - worker
    - dd-agent
    - backend
    networks:
    - storedog-network
    environment:
    - DD_VERSION=${NEXT_PUBLIC_DD_VERSION_FRONTEND-1.0.0}
    - DD_SERVICE=${NEXT_PUBLIC_DD_SERVICE_FRONTEND-store-frontend}
    - DD_ENV=${DD_ENV-dev}
    - DD_AGENT_HOST=dd-agent
    - DD_LOGS_INJECTION=true
    - DD_RUNTIME_METRICS_ENABLED=true
    - DD_PROFILING_ENABLED=true
    labels:
      com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "store-frontend", "auto_multi_line_detection":true
        }]'
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: store-frontend
      com.datadoghq.tags.version: ${NEXT_PUBLIC_DD_VERSION_FRONTEND-1.0.0}
  backend:
    image: ghcr.io/datadog/storedog/backend:latest
    command: wait-for-it postgres:5432 -- bundle exec rails s -b 0.0.0.0 -p 4000 --pid
      /app/tmp/pids/server.pid
    depends_on:
    - postgres
    - redis
    - dd-agent
    ports:
    - 4000:4000
    networks:
    - storedog-network
    environment:
    - REDIS_URL=redis://redis:6379/0
    - DB_HOST=postgres
    - DB_PORT=5432
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - DISABLE_SPRING=1
    - DD_AGENT_HOST=dd-agent
    - DD_VERSION=${DD_VERSION_BACKEND-1.0.0}
    - DD_SERVICE=store-backend
    - DD_ENV=${DD_ENV-dev}
    - DD_LOGS_INJECTION=true
    - DD_RUNTIME_METRICS_ENABLED=true
    - DD_PROFILING_ENABLED=true
    - DD_PROFILING_ALLOCATION_ENABLED=true
    - RAILS_ENV=${RAILS_ENV-production}
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-backend",  "auto_multi_line_detection":true
        }]'
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: store-backend
      com.datadoghq.tags.version: ${DD_VERSION_BACKEND-1.0.0}
    volumes:
    - .env:/app/.env
  worker:
    image: ghcr.io/datadog/storedog/backend:latest
    command: wait-for-it postgres:5432 -- bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
    - postgres
    - redis
    - backend
    - dd-agent
    networks:
    - storedog-network
    environment:
    - REDIS_URL=redis://redis:6379/0
    - DB_HOST=postgres
    - DB_PORT=5432
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - DISABLE_SPRING=1
    - DD_AGENT_HOST=dd-agent
    - DD_ENV=${DD_ENV-dev}
    - DD_SERVICE=store-worker
    - DD_VERSION=${DD_VERSION_BACKEND-1.0.0}
    - DD_LOGS_INJECTION=true
    - DD_RUNTIME_METRICS_ENABLED=true
    - DD_PROFILING_ENABLED=true
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "storedog-worker",  "auto_multi_line_detection":true
        }]'
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: store-worker
      com.datadoghq.tags.version: ${DD_VERSION_BACKEND-1.0.0}
    volumes:
    - .env:/app/.env
  discounts:
    image: ghcr.io/datadog/storedog/discounts:latest
    command: wait-for-it postgres:5432 -- ddtrace-run flask run --port=2814 --host=0.0.0.0
    depends_on:
    - postgres
    - dd-agent
    environment:
    - FLASK_APP=discounts.py
    - FLASK_DEBUG=0
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_HOST=postgres
    - DD_AGENT_HOST=dd-agent
    - DD_LOGS_INJECTION=true
    - DD_PROFILING_ENABLED=true
    - DD_VERSION=${DD_VERSION_DISCOUNTS-1.0.0}
    - DD_SERVICE=store-discounts
    - DD_ENV=${DD_ENV-dev}
    networks:
    - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "store-discounts"}]'
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: store-discounts
      com.datadoghq.tags.version: ${DD_VERSION_DISCOUNTS-1.0.0}
  ads:
    image: ghcr.io/datadog/storedog/ads-java:latest
    depends_on:
    - dd-agent
    environment:
    - DD_AGENT_HOST=dd-agent
    - DD_LOGS_INJECTION=true
    - DD_PROFILING_ENABLED=true
    - DD_SERVICE=store-ads
    - DD_VERSION=${DD_VERSION_ADS-1.0.0}
    - DD_ENV=${DD_ENV-dev}
    networks:
    - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "store-ads"}]'
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: store-ads
      com.datadoghq.tags.version: ${DD_VERSION_ADS-1.0.0}
  nginx:
    image: ghcr.io/datadog/storedog/nginx:latest
    restart: always
    ports:
    - 80:80
    networks:
    - storedog-network
    depends_on:
    - frontend
    - dd-agent
    environment:
    - DD_ENV=${DD_ENV-dev}
    - DD_VERSION_NGINX=${DD_VERSION_NGINX-1.0.0}
    - DD_SERVICE=nginx
    labels:
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: nginx
      com.datadoghq.tags.version: ${DD_VERSION_NGINX-1.0.0}
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "nginx"}]'
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]'
  postgres:
    image: ghcr.io/datadog/storedog/postgres:latest
    restart: always
    depends_on:
    - dd-agent
    networks:
    - storedog-network
    environment:
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - DD_ENV=${DD_ENV-dev}
    - DD_SERVICE=postgres
    - DD_VERSION=${DD_VERSION_POSTGRES-15}
    labels:
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: postgres
      com.datadoghq.tags.version: ${DD_VERSION_POSTGRES-15}
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432, "username":"datadog",
        "password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres", "auto_multi_line_detection":true,
        "path": "/var/log/pg_log/postgresql*.json", "type": "file"}]'
  redis:
    image: redis:6.2-alpine
    depends_on:
    - dd-agent
    environment:
    - DD_ENV=${DD_ENV-dev}
    - DD_VERSION_NGINX=${DD_VERSION_REDIS-6.2}
    - DD_SERVICE=redis
    volumes:
    - redis:/data
    networks:
    - storedog-network
    labels:
      com.datadoghq.tags.env: ${DD_ENV-dev}
      com.datadoghq.tags.service: redis
      com.datadoghq.tags.version: ${DD_VERSION_REDIS-6.2}
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":6379}]'
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis"}]'
  puppeteer:
    build:
      context: ./services/puppeteer
    platform: linux/amd64
    environment:
    - STOREDOG_URL=${STOREDOG_URL-http://nginx:80}
    - PUPPETEER_TIMEOUT
    - SKIP_SESSION_CLOSE
    networks:
    - storedog-network
    depends_on:
    - frontend
    shm_size: 4gb
    cap_add:
    - SYS_ADMIN
volumes:
  redis:
    name: storedog_redis
  postgres_logs:
    name: storedog_postgres_logs
networks:
  storedog-network:
    name: storedog_storedog-network
